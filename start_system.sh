#!/bin/bash

# Script de d√©marrage du syst√®me MiniBotPanel v2

echo "========================================="
echo "  MINIBOT PANEL V2 - D√âMARRAGE"
echo "========================================="

# D√©terminer automatiquement le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Configurer les chemins pour cuDNN (pour GPU)
export LD_LIBRARY_PATH=/usr/local/lib/python3.10/dist-packages/ctranslate2.libs:$LD_LIBRARY_PATH

# Cr√©er les dossiers n√©cessaires
mkdir -p logs recordings audio

# Nettoyage automatique des anciens enregistrements
echo "üßπ Nettoyage des anciens enregistrements (>7 jours)..."
if [ -f "$SCRIPT_DIR/system/cleanup_recordings.sh" ]; then
    bash "$SCRIPT_DIR/system/cleanup_recordings.sh"
else
    echo "‚ö†Ô∏è  Script de nettoyage introuvable, skipping..."
fi

# V√©rifier si les fichiers audio sont install√©s dans Asterisk
echo "üîç V√©rification des fichiers audio..."
if [ ! -d "/var/lib/asterisk/sounds/minibot" ] || [ -z "$(ls -A /var/lib/asterisk/sounds/minibot 2>/dev/null)" ]; then
    echo "‚ö†Ô∏è  Fichiers audio non install√©s dans Asterisk"
    echo "   Ex√©cuter: sudo ./system/setup_audio.sh"
    echo "   Puis relancer ce script"
    # On continue quand m√™me mais avec un avertissement
    echo "   ‚ö†Ô∏è  Les fichiers audio ne fonctionneront pas correctement !"
else
    echo "‚úÖ Fichiers audio install√©s dans Asterisk"
fi

# V√©rifier Asterisk
echo "üîç V√©rification Asterisk..."
if systemctl is-active --quiet asterisk; then
    echo "‚úÖ Asterisk est actif"
else
    echo "‚ö†Ô∏è Asterisk n'est pas actif, d√©marrage..."
    sudo systemctl start asterisk
    sleep 5
fi

# V√©rifier PostgreSQL
echo "üîç V√©rification PostgreSQL..."
if systemctl is-active --quiet postgresql; then
    echo "‚úÖ PostgreSQL est actif"
else
    echo "‚ö†Ô∏è PostgreSQL n'est pas actif, d√©marrage..."
    sudo systemctl start postgresql
    sleep 3
fi

# V√©rifier et arr√™ter les anciens processus s'ils existent
echo "üîç V√©rification des processus existants..."
if pgrep -f "python3 robot_ari.py" > /dev/null; then
    echo "‚ö†Ô∏è  Robot ARI d√©j√† en cours, arr√™t..."
    pkill -f "python3 robot_ari.py"
    sleep 2
fi

if pgrep -f "python3 system/batch_caller.py" > /dev/null; then
    echo "‚ö†Ô∏è  Batch Caller d√©j√† en cours, arr√™t..."
    pkill -f "python3 system/batch_caller.py"
    sleep 2
fi

if pgrep -f "uvicorn main:app" > /dev/null; then
    echo "‚ö†Ô∏è  FastAPI d√©j√† en cours, arr√™t..."
    pkill -f "uvicorn main:app"
    sleep 2
fi

# PR√â-CHARGER WHISPER AVANT TOUT !
echo ""
echo "ü§ñ Pr√©-chargement de Whisper (pour √©viter les d√©lais pendant les appels)..."
python3 -c "
import sys
import os
sys.path.insert(0, os.getcwd())
from services.whisper_service import whisper_service
print('‚úÖ Whisper model loaded and ready!')
print('   Le mod√®le est maintenant en cache')
" 2>&1 || echo "‚ö†Ô∏è  Whisper pre-load failed but continuing..."

# Lancer robot_ari.py en arri√®re-plan (avec tout pr√©-charg√©)
echo ""
echo "ü§ñ D√©marrage du Robot ARI..."
echo "   ‚Ä¢ Whisper se charge au d√©marrage"
echo "   ‚Ä¢ Audio convertis en 8000 Hz et mis en cache"
echo "   ‚Ä¢ Sc√©nario TEST pr√©-charg√©"
python3 robot_ari.py > logs/robot_ari_console.log 2>&1 &
ROBOT_PID=$!
echo "‚úÖ Robot ARI lanc√© (PID: $ROBOT_PID)"
echo "   Tout est pr√©-charg√© en m√©moire !"

sleep 3

# Lancer Batch Caller (gestion de queue d'appels avec throttling)
echo ""
echo "üìû D√©marrage du Batch Caller (file d'attente d'appels)..."
echo "   ‚Ä¢ Max 8 appels simultan√©s"
echo "   ‚Ä¢ Gestion intelligente de la queue"
echo "   ‚Ä¢ Retry automatique en cas d'√©chec"
python3 system/batch_caller.py > logs/batch_caller_console.log 2>&1 &
BATCH_PID=$!
echo "‚úÖ Batch Caller lanc√© (PID: $BATCH_PID)"

sleep 3

# Lancer FastAPI
echo ""
echo "üåê D√©marrage de l'API FastAPI..."
python3 -m uvicorn main:app --host 0.0.0.0 --port 8000 > logs/fastapi_console.log 2>&1 &
API_PID=$!
echo "‚úÖ FastAPI lanc√© (PID: $API_PID)"

sleep 3

# V√©rifier que tout fonctionne
echo ""
echo "üß™ V√©rification du syst√®me..."
sleep 2

# Test health check
if curl -s http://localhost:8000/health | grep -q "healthy"; then
    echo "‚úÖ API Health Check: OK"
else
    echo "‚ùå API Health Check: FAILED"
fi

# Afficher les infos
echo ""
echo "========================================="
echo "  SYST√àME D√âMARR√â AVEC SUCC√àS"
echo "========================================="
echo ""
echo "üìä Informations:"
echo "  ‚Ä¢ Robot ARI PID: $ROBOT_PID"
echo "  ‚Ä¢ Batch Caller PID: $BATCH_PID"
echo "  ‚Ä¢ FastAPI PID: $API_PID"
echo "  ‚Ä¢ API URL: http://localhost:8000"
echo "  ‚Ä¢ Logs: logs/minibot_$(date +%Y%m%d).log"
echo ""
echo "üìã Commandes utiles:"
echo "  ‚Ä¢ Voir logs robot: tail -f logs/minibot_$(date +%Y%m%d).log"
echo "  ‚Ä¢ Arr√™ter: ./stop_system.sh"
echo "  ‚Ä¢ Tester appel: curl -X POST http://localhost:8000/calls/launch -H 'Content-Type: application/json' -d '{\"phone_number\":\"0612345678\",\"scenario\":\"test\"}'"
echo ""
echo "üéâ Syst√®me pr√™t (Batch mode avec Whisper) !"