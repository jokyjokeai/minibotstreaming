#!/bin/bash

# Script de d√©marrage du syst√®me MiniBotPanel v2 - Architecture Streaming

echo "========================================="
echo "  MINIBOT PANEL V2 - D√âMARRAGE STREAMING"
echo "========================================="

# D√©terminer automatiquement le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Cr√©er les dossiers n√©cessaires
mkdir -p logs recordings audio assembled_audio transcripts

# Nettoyage automatique des anciens enregistrements
echo "üßπ Nettoyage des anciens enregistrements (>7 jours)..."
if [ -f "$SCRIPT_DIR/system/cleanup_recordings.sh" ]; then
    bash "$SCRIPT_DIR/system/cleanup_recordings.sh"
else
    echo "‚ö†Ô∏è  Script de nettoyage introuvable, skipping..."
fi

# V√©rifier si les fichiers audio sont install√©s dans Asterisk (16kHz streaming)
echo "üîç V√©rification des fichiers audio streaming (16kHz)..."
if [ ! -d "/var/lib/asterisk/sounds/minibot" ] || [ -z "$(ls -A /var/lib/asterisk/sounds/minibot 2>/dev/null)" ]; then
    echo "‚ö†Ô∏è  Fichiers audio 16kHz non install√©s dans Asterisk"
    echo "   Ex√©cuter: sudo ./system/setup_audio.sh"
    echo "   Puis relancer ce script"
    echo "   ‚ö†Ô∏è  Les fichiers audio streaming ne fonctionneront pas !"
else
    echo "‚úÖ Fichiers audio 16kHz install√©s dans Asterisk"
fi

# V√©rifier et d√©marrer Asterisk 22 + AudioFork (m√©thode robuste)
echo "üîç V√©rification Asterisk 22 + AudioFork..."
if systemctl is-active --quiet asterisk; then
    echo "‚úÖ Asterisk est actif"
    # V√©rifier modules streaming (AudioFork ou √©quivalents)
    if asterisk -rx 'module show like stasis' 2>/dev/null | grep -q 'res_stasis'; then
        echo "‚úÖ Modules streaming (Stasis) d√©tect√©s"
        # V√©rifier sp√©cifiquement les modules pour streaming audio
        if asterisk -rx 'module show like snoop' 2>/dev/null | grep -q 'res_stasis_snoop'; then
            echo "‚úÖ Module snoop audio d√©tect√©"
        else
            echo "‚ö†Ô∏è  Module snoop audio non d√©tect√©"
        fi
    else
        echo "‚ö†Ô∏è  Modules streaming non d√©tect√©s"
    fi
else
    echo "‚ö†Ô∏è Asterisk n'est pas actif, d√©marrage robuste..."
    
    # M√©thode robuste de d√©marrage Asterisk
    echo "üßπ Nettoyage processus Asterisk existants..."
    sudo systemctl stop asterisk 2>/dev/null || true
    sudo pkill -f asterisk 2>/dev/null || true
    sleep 3
    
    echo "üîí Nettoyage fichiers de lock..."
    sudo rm -f /var/run/asterisk/asterisk.ctl 2>/dev/null || true
    sudo rm -f /var/run/asterisk/asterisk.pid 2>/dev/null || true
    
    echo "üìã Correction permissions configurations..."
    sudo chown asterisk:asterisk /etc/asterisk/pjsip.conf 2>/dev/null || true
    sudo chown asterisk:asterisk /etc/asterisk/asterisk.conf 2>/dev/null || true
    sudo chmod 644 /etc/asterisk/pjsip.conf 2>/dev/null || true
    sudo chmod 644 /etc/asterisk/asterisk.conf 2>/dev/null || true
    
    echo "üìÅ Correction permissions r√©pertoires..."
    for dir in "/var/run/asterisk" "/var/lib/asterisk" "/var/log/asterisk" "/var/spool/asterisk"; do
        sudo mkdir -p "$dir" 2>/dev/null || true
        sudo chown -R asterisk:asterisk "$dir" 2>/dev/null || true
        sudo chmod 755 "$dir" 2>/dev/null || true
    done
    
    echo "üéØ D√©marrage Asterisk avec retry..."
    max_attempts=3
    for attempt in $(seq 1 $max_attempts); do
        echo "   Tentative $attempt/$max_attempts"
        
        sudo systemctl start asterisk
        sleep 5
        
        if systemctl is-active --quiet asterisk; then
            echo "‚úÖ Asterisk d√©marr√© avec succ√®s (tentative $attempt)"
            break
        elif [ $attempt -eq $max_attempts ]; then
            echo "‚ùå √âchec d√©marrage Asterisk apr√®s $max_attempts tentatives"
            echo "   V√©rifiez: sudo journalctl -u asterisk"
        else
            echo "‚ö†Ô∏è  Tentative $attempt √©chou√©e, retry..."
            sudo systemctl stop asterisk 2>/dev/null || true
            sleep 2
        fi
    done
fi

# V√©rifier PostgreSQL
echo "üîç V√©rification PostgreSQL..."
if systemctl is-active --quiet postgresql; then
    echo "‚úÖ PostgreSQL est actif"
else
    echo "‚ö†Ô∏è PostgreSQL n'est pas actif, d√©marrage..."
    sudo systemctl start postgresql
    sleep 3
fi

# V√©rifier Ollama NLP (service streaming)
echo "üîç V√©rification Ollama NLP..."
if systemctl is-active --quiet ollama; then
    echo "‚úÖ Ollama est actif"
    # V√©rifier mod√®le disponible
    if ollama list | grep -q 'llama3.2'; then
        echo "‚úÖ Mod√®le Llama3.2 disponible"
    else
        echo "‚ö†Ô∏è  Mod√®le Llama3.2 manquant, installation..."
        ollama pull llama3.2:1b
    fi
else
    echo "‚ö†Ô∏è Ollama n'est pas actif, d√©marrage..."
    sudo systemctl start ollama
    sleep 5
fi

# V√©rifier mod√®les Vosk ASR
echo "üîç V√©rification mod√®les Vosk fran√ßais..."
VOSK_PATH="/opt/minibot/models/vosk-fr"
VOSK_REAL_PATH="/var/lib/vosk-models/vosk-fr-small"

if [ -d "$VOSK_PATH" ] && [ -f "$VOSK_PATH/conf/model.conf" ]; then
    echo "‚úÖ Mod√®le Vosk fran√ßais disponible"
elif [ -d "$VOSK_REAL_PATH" ]; then
    echo "üîó Recr√©ation du lien symbolique Vosk..."
    sudo mkdir -p /opt/minibot/models
    sudo ln -sf "$VOSK_REAL_PATH" "$VOSK_PATH"
    echo "‚úÖ Lien Vosk recr√©√©"
else
    echo "‚ö†Ô∏è  Mod√®le Vosk fran√ßais manquant"
    echo "   T√©l√©chargement automatique en cours..."
    
    # T√©l√©charger le mod√®le s'il n'existe pas
    sudo mkdir -p /var/lib/vosk-models
    cd /tmp
    wget -q -O vosk-fr-small.zip "https://alphacephei.com/vosk/models/vosk-model-fr-0.22-linto-2.2.zip" || \
    wget -q -O vosk-fr-small.zip "https://storage.googleapis.com/linagora-ai/models/vosk-fr-small.zip"
    
    if [ -f "vosk-fr-small.zip" ]; then
        sudo unzip -q vosk-fr-small.zip
        sudo mv vosk-model-* "$VOSK_REAL_PATH" 2>/dev/null || sudo mv vosk-* "$VOSK_REAL_PATH" 2>/dev/null
        sudo chown -R root:root "$VOSK_REAL_PATH"
        sudo chmod -R 755 "$VOSK_REAL_PATH"
        
        # Cr√©er le lien symbolique
        sudo mkdir -p /opt/minibot/models
        sudo ln -sf "$VOSK_REAL_PATH" "$VOSK_PATH"
        
        rm -f vosk-fr-small.zip
        echo "‚úÖ Mod√®le Vosk t√©l√©charg√© et install√©"
    else
        echo "‚ùå √âchec t√©l√©chargement mod√®le Vosk"
    fi
fi

# V√©rifier et arr√™ter les anciens processus s'ils existent
echo "üîç V√©rification des processus existants..."
if pgrep -f "python3 robot_ari_hybrid.py" > /dev/null; then
    echo "‚ö†Ô∏è  Robot ARI Streaming d√©j√† en cours, arr√™t..."
    pkill -f "python3 robot_ari_hybrid.py"
    sleep 2
fi

if pgrep -f "python3 system/batch_caller.py" > /dev/null; then
    echo "‚ö†Ô∏è  Batch Caller d√©j√† en cours, arr√™t..."
    pkill -f "python3 system/batch_caller.py"
    sleep 2
fi

if pgrep -f "uvicorn main:app" > /dev/null; then
    echo "‚ö†Ô∏è  FastAPI d√©j√† en cours, arr√™t..."
    pkill -f "uvicorn main:app"
    sleep 2
fi

# ========== V√âRIFICATION STREAMING SERVICES ==========
echo ""
echo "========================================="
echo "  V√âRIFICATION SERVICES STREAMING"
echo "========================================="
echo ""

# Test Vosk
echo "üé§ Test Vosk ASR..."
python3 -c "
try:
    import vosk
    print('‚úÖ Vosk import√© avec succ√®s')
except ImportError:
    print('‚ùå Vosk non disponible')
    exit(1)
" || { echo "‚ùå Vosk requis pour streaming"; exit 1; }

# Test Ollama API
echo "ü§ñ Test Ollama NLP..."
if curl -s http://localhost:11434/api/version >/dev/null; then
    echo "‚úÖ Ollama API accessible"
else
    echo "‚ùå Ollama API non accessible"
    exit 1
fi

# Test WebRTC VAD
echo "üéôÔ∏è  Test WebRTC VAD..."
python3 -c "
try:
    import webrtcvad
    print('‚úÖ WebRTC VAD disponible')
except ImportError:
    print('‚ùå WebRTC VAD non disponible')
    exit(1)
" || { echo "‚ùå WebRTC VAD requis pour streaming"; exit 1; }

echo "‚úÖ Tous les services streaming sont disponibles"

# ========== D√âMARRAGE SERVICES STREAMING ==========
echo ""
echo "========================================="
echo "  D√âMARRAGE ARCHITECTURE STREAMING"
echo "========================================="
echo ""

# Lancer Robot ARI Streaming en arri√®re-plan
echo "üåä D√©marrage du Robot ARI Streaming..."
echo "   ‚Ä¢ Vosk ASR temps r√©el (16kHz)"
echo "   ‚Ä¢ Ollama NLP local"
echo "   ‚Ä¢ Barge-in naturel"
echo "   ‚Ä¢ AMD Hybride"
python3 robot_ari_hybrid.py > logs/robot_ari_console.log 2>&1 &
ROBOT_PID=$!
echo "‚úÖ Robot ARI Streaming lanc√© (PID: $ROBOT_PID)"

sleep 5

# Lancer Batch Caller (gestion de queue d'appels)
echo ""
echo "üìû D√©marrage du Batch Caller (gestionnaire campagnes)..."
echo "   ‚Ä¢ Max 8 appels simultan√©s"
echo "   ‚Ä¢ Gestion intelligente de la queue"
echo "   ‚Ä¢ Retry automatique streaming"
python3 system/batch_caller.py > logs/batch_caller_console.log 2>&1 &
BATCH_PID=$!
echo "‚úÖ Batch Caller lanc√© (PID: $BATCH_PID)"

sleep 3

# Lancer FastAPI
echo ""
echo "üåê D√©marrage de l'API FastAPI..."
echo "   ‚Ä¢ Endpoints streaming"
echo "   ‚Ä¢ Health checks Vosk + Ollama"
echo "   ‚Ä¢ Monitoring temps r√©el"
python3 -m uvicorn main:app --host 0.0.0.0 --port 8000 > logs/main.log 2>&1 &
API_PID=$!
echo "‚úÖ FastAPI lanc√© (PID: $API_PID)"

sleep 5

# ========== AUTO-HEALING STREAMING CHECKS ==========
echo ""
echo "üîß Auto-healing streaming checks..."

# Fonction de v√©rification et correction automatique
check_and_fix() {
    local service_name=$1
    local check_command=$2
    local fix_command=$3
    local description=$4
    
    echo "üîç Checking $description..."
    
    if eval "$check_command"; then
        echo "‚úÖ $description: OK"
        return 0
    else
        echo "‚ö†Ô∏è  $description: ISSUE DETECTED, auto-fixing..."
        eval "$fix_command"
        sleep 2
        
        # Re-v√©rifier apr√®s correction
        if eval "$check_command"; then
            echo "‚úÖ $description: FIXED"
            return 0
        else
            echo "‚ùå $description: FAILED TO FIX"
            return 1
        fi
    fi
}

# Auto-healing checks
check_and_fix "ollama_model" \
    "ollama list | grep -q 'llama3.2:1b'" \
    "ollama pull llama3.2:1b" \
    "Ollama optimal model (llama3.2:1b)"

check_and_fix "asterisk_ari_config" \
    "grep -q 'enabled = yes' /etc/asterisk/ari.conf && grep -q 'MiniBotAI2025!' /etc/asterisk/ari.conf" \
    "echo 'Auto-fixing ARI config...' && sudo sed -i 's/\${ARI_PASSWORD}/MiniBotAI2025!/g' /etc/asterisk/ari.conf" \
    "Asterisk ARI configuration"

check_and_fix "asterisk_http_config" \
    "grep -q 'enabled=yes' /etc/asterisk/http.conf" \
    "echo '[general]\nenabled=yes\nbindaddr=0.0.0.0\nbindport=8088\nwebsocket_timeout=30\n\n[websockets]\nenabled=yes' | sudo tee /etc/asterisk/http.conf > /dev/null" \
    "Asterisk HTTP configuration"

echo "‚úÖ Auto-healing checks completed"

# V√©rifications suppl√©mentaires optimisations
echo "üîß V√©rifications optimisations suppl√©mentaires..."

# V√©rifier mod√®le Ollama optimal
if ollama list 2>/dev/null | grep -q 'llama3.2:1b'; then
    echo "‚úÖ Mod√®le Ollama optimal pr√©sent"
else
    echo "üì• Installation mod√®le optimal..."
    ollama pull llama3.2:1b >/dev/null 2>&1 &
fi

# V√©rifier configuration timeout
if grep -q 'OLLAMA_TIMEOUT.*8' config.py 2>/dev/null; then
    echo "‚úÖ Configuration timeout optimis√©e"
else
    echo "üîß Optimisation timeout..."
    sed -i 's/OLLAMA_TIMEOUT = int(os.getenv("OLLAMA_TIMEOUT", "10"))/OLLAMA_TIMEOUT = int(os.getenv("OLLAMA_TIMEOUT", "8"))/' config.py 2>/dev/null || true
fi

# V√©rifier optimisations NLP
if grep -q '"temperature": 0.05' services/nlp_intent.py 2>/dev/null; then
    echo "‚úÖ Param√®tres NLP optimis√©s"
else
    echo "üß† Optimisation param√®tres NLP..."
    sed -i 's/"temperature": 0.1/"temperature": 0.05/' services/nlp_intent.py 2>/dev/null || true
    sed -i 's/"num_predict": 50/"num_predict": 20/' services/nlp_intent.py 2>/dev/null || true
    sed -i 's/"top_p": 0.9/"top_p": 0.15/' services/nlp_intent.py 2>/dev/null || true
fi

echo "‚úÖ Optimisations v√©rifi√©es et appliqu√©es"

# ========== V√âRIFICATIONS FINALES ==========
echo ""
echo "üß™ V√©rification du syst√®me streaming..."

# Test health check complet
echo "üè• Test Health Check..."
if curl -s http://localhost:8000/health | grep -q "healthy"; then
    echo "‚úÖ API Health Check: OK"
    
    # Afficher d√©tails health check
    echo "üìä D√©tails services:"
    curl -s http://localhost:8000/health | python3 -m json.tool | grep -E "(vosk_status|ollama_status|streaming)"
else
    echo "‚ùå API Health Check: FAILED"
fi

# Test services via health check
echo "üé§ Test Vosk via API..."
HEALTH_RESPONSE=$(curl -s http://localhost:8000/health 2>/dev/null)
if echo "$HEALTH_RESPONSE" | grep -q '"streaming":"enabled"'; then
    echo "‚úÖ Vosk ASR: Int√©gr√© dans streaming"
else
    echo "‚ö†Ô∏è  Vosk ASR: Non pr√™t"
fi

# Test Ollama via API  
echo "ü§ñ Test Ollama via API..."
if echo "$HEALTH_RESPONSE" | grep -q '"ollama":"running"'; then
    echo "‚úÖ Ollama NLP: Pr√™t"
else
    echo "‚ö†Ô∏è  Ollama NLP: Non pr√™t"
fi

# Afficher les infos
echo ""
echo "========================================="
echo "  SYST√àME STREAMING D√âMARR√â AVEC SUCC√àS"
echo "========================================="
echo ""
echo "üåä Architecture Streaming MiniBotPanel v2:"
echo "  ‚Ä¢ Robot ARI Streaming PID: $ROBOT_PID"
echo "  ‚Ä¢ Batch Caller PID: $BATCH_PID"  
echo "  ‚Ä¢ FastAPI PID: $API_PID"
echo "  ‚Ä¢ API URL: http://localhost:8000"
echo ""
echo "üìä Services Streaming:"
echo "  ‚Ä¢ Vosk ASR: Transcription fran√ßaise temps r√©el"
echo "  ‚Ä¢ Ollama NLP: Analyse intention locale"
echo "  ‚Ä¢ WebRTC VAD: D√©tection parole + barge-in"
echo "  ‚Ä¢ AudioFork: Streaming audio 16kHz bidirectionnel"
echo ""
echo "üìã Commandes utiles:"
echo "  ‚Ä¢ Logs streaming: ./monitor_logs.sh"
echo "  ‚Ä¢ Arr√™ter: ./stop_system.sh"
echo "  ‚Ä¢ Health check: curl http://localhost:8000/health"
echo "  ‚Ä¢ Test appel: curl -X POST http://localhost:8000/calls/launch -H 'Content-Type: application/json' -d '{\"phone_number\":\"33612345678\",\"scenario\":\"production\"}'"
echo ""
echo "üéâ Architecture streaming op√©rationnelle !"
echo "    Latence cible: <200ms (Vosk + Ollama + Barge-in)"