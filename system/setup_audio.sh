#!/bin/bash

# Script de configuration audio - √Ä ex√©cuter UNE FOIS ou apr√®s modification des fichiers
# Usage: sudo ./setup_audio.sh [-f|--force]
# Option -f : Force le retraitement de tous les fichiers (utile pour changer l'amplification)

FORCE_REPROCESS=false

# Analyser les arguments
if [ "$1" = "-f" ] || [ "$1" = "--force" ]; then
    FORCE_REPROCESS=true
fi

echo "========================================="
echo "  CONFIGURATION AUDIO POUR ASTERISK"
echo "========================================="

# D√©tecter automatiquement le r√©pertoire du script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

AUDIO_SOURCE="$PROJECT_ROOT/audio"
TTS_GENERATED_SOURCE="$PROJECT_ROOT/tts_generated"
SCENARIOS_SOURCE="$PROJECT_ROOT/scenarios"
ASTERISK_SOUNDS="/var/lib/asterisk/sounds/minibot"

# Si force, supprimer les fichiers trait√©s
if [ "$FORCE_REPROCESS" = true ]; then
    echo ""
    echo "üîÑ Mode FORCE : Suppression des fichiers existants..."
    rm -f "$ASTERISK_SOUNDS"/*.wav 2>/dev/null
    echo "   ‚úÖ Fichiers supprim√©s, retraitement forc√©"
fi

# Menu d'amplification
echo ""
echo "üîä R√âGLAGE VOLUME AUDIO"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "Choisissez le niveau de volume :"
echo ""
echo "  üìâ R√âDUCTION (si audio trop fort) :"
echo "     -3) -10 dB (r√©duction forte)"
echo "     -2) -6 dB  (r√©duction notable)"
echo "     -1) -3 dB  (r√©duction l√©g√®re)"
echo ""
echo "  ‚öñÔ∏è  AUCUN CHANGEMENT :"
echo "      0) Volume original (pas de modification)"
echo ""
echo "  üìà AUGMENTATION (si audio trop faible) :"
echo "      1) +3 dB  (üëç Recommand√© - augmentation l√©g√®re et s√ªre)"
echo "      2) +6 dB  (augmentation notable)"
echo "      3) +8 dB  (augmentation forte)"
echo "      4) +10 dB (augmentation tr√®s forte, risque de saturation)"
echo ""
echo "  üéöÔ∏è  AUTO :"
echo "      5) Normalisation automatique (volume max sans saturation)"
echo ""
echo -n "Votre choix [-3 √† 5] (d√©faut: 1): "
read GAIN_CHOICE

# Valeur par d√©faut
GAIN_CHOICE=${GAIN_CHOICE:-1}

# D√©finir le param√®tre sox selon le choix
case $GAIN_CHOICE in
    -3)
        GAIN_PARAM="vol -10dB"
        GAIN_LABEL="-10 dB (r√©duction forte)"
        ;;
    -2)
        GAIN_PARAM="vol -6dB"
        GAIN_LABEL="-6 dB (r√©duction notable)"
        ;;
    -1)
        GAIN_PARAM="vol -3dB"
        GAIN_LABEL="-3 dB (r√©duction l√©g√®re)"
        ;;
    0)
        GAIN_PARAM=""
        GAIN_LABEL="Aucune modification"
        ;;
    1)
        GAIN_PARAM="vol 3dB"
        GAIN_LABEL="+3 dB (recommand√©)"
        ;;
    2)
        GAIN_PARAM="vol 6dB"
        GAIN_LABEL="+6 dB"
        ;;
    3)
        GAIN_PARAM="vol 8dB"
        GAIN_LABEL="+8 dB"
        ;;
    4)
        GAIN_PARAM="vol 10dB"
        GAIN_LABEL="+10 dB"
        ;;
    5)
        GAIN_PARAM="norm"
        GAIN_LABEL="Normalisation auto"
        ;;
    *)
        echo "‚ö†Ô∏è  Choix invalide, utilisation de +3 dB par d√©faut"
        GAIN_PARAM="vol 3dB"
        GAIN_LABEL="+3 dB (recommand√©)"
        ;;
esac

echo ""
echo "‚úÖ R√©glage volume s√©lectionn√©: $GAIN_LABEL"
echo ""

# 1. Cr√©er le r√©pertoire minibot s'il n'existe pas
echo "üìÅ Cr√©ation du r√©pertoire $ASTERISK_SOUNDS..."
mkdir -p "$ASTERISK_SOUNDS"

# 2. Conversion et copie intelligente MULTI-SOURCES
echo "üîÑ Traitement des fichiers audio MULTI-SOURCES..."

# Fonction de traitement unifi√©e
process_audio_file() {
    local source_file="$1"
    local source_type="$2"
    
    if [ -f "$source_file" ]; then
        local filename=$(basename "$source_file")
        local target="$ASTERISK_SOUNDS/$filename"

        # V√©rifier si le fichier source est plus r√©cent
        if [ ! -f "$target" ] || [ "$source_file" -nt "$target" ]; then
            echo "   üìù Traitement de $filename ($source_type)..."

            # Conversion 16kHz pour optimisation streaming + AudioFork + Vosk
            if [ -z "$GAIN_PARAM" ]; then
                # Pas d'amplification, juste conversion 16kHz mono
                sox "$source_file" -r 16000 -c 1 "$target" 2>/dev/null
            else
                # Amplification + conversion 16kHz mono
                sox "$source_file" -r 16000 -c 1 "$target" $GAIN_PARAM 2>/dev/null
            fi

            if [ $? -eq 0 ]; then
                if [ -n "$GAIN_PARAM" ]; then
                    echo "   ‚úÖ $filename converti (16000 Hz mono + $GAIN_LABEL) [$source_type]"
                else
                    echo "   ‚úÖ $filename converti (16000 Hz mono) [$source_type]"
                fi
            else
                echo "   ‚ö†Ô∏è  Erreur de conversion pour $filename [$source_type]"
            fi
        else
            echo "   ‚è≠Ô∏è  $filename d√©j√† √† jour [$source_type]"
        fi
    fi
}

# 2a. Traitement fichiers audio de base (r√©pertoire audio/)
echo "üìÅ Source: Fichiers audio de base..."
if [ -d "$AUDIO_SOURCE" ]; then
    file_count=0
    for wav in "$AUDIO_SOURCE"/*.wav; do
        if [ -f "$wav" ]; then
            process_audio_file "$wav" "BASE"
            file_count=$((file_count + 1))
        fi
    done
    echo "   üí´ $file_count fichier(s) audio de base trait√©(s)"
else
    echo "   ‚ö†Ô∏è  R√©pertoire audio/ non trouv√©: $AUDIO_SOURCE"
fi

# 2b. Traitement fichiers TTS g√©n√©r√©s (r√©pertoire tts_generated/)
echo "üìÅ Source: Fichiers TTS g√©n√©r√©s..."
if [ -d "$TTS_GENERATED_SOURCE" ]; then
    file_count=0
    for wav in "$TTS_GENERATED_SOURCE"/*.wav; do
        if [ -f "$wav" ]; then
            process_audio_file "$wav" "TTS_GEN"
            file_count=$((file_count + 1))
        fi
    done
    echo "   üéôÔ∏è  $file_count fichier(s) TTS g√©n√©r√©s trait√©(s)"
else
    echo "   ‚ÑπÔ∏è  R√©pertoire tts_generated/ non trouv√© (sera cr√©√© si n√©cessaire)"
    mkdir -p "$TTS_GENERATED_SOURCE"
fi

# 2c. Traitement fichiers TTS de sc√©narios (scenarios/*/audio/*.wav)
echo "üìÅ Source: Fichiers TTS de sc√©narios..."
if [ -d "$SCENARIOS_SOURCE" ]; then
    file_count=0
    # Rechercher tous les fichiers .wav dans les sous-dossiers de sc√©narios
    find "$SCENARIOS_SOURCE" -name "*.wav" -type f | while read scenario_wav; do
        if [ -f "$scenario_wav" ]; then
            # Extraire nom du sc√©nario pour pr√©fixer
            scenario_name=$(echo "$scenario_wav" | sed "s|$SCENARIOS_SOURCE/||" | cut -d'/' -f1)
            original_filename=$(basename "$scenario_wav")
            
            # Cr√©er nom unique avec pr√©fixe sc√©nario
            prefixed_filename="${scenario_name}_${original_filename}"
            
            # Cr√©er fichier temporaire avec le bon nom
            temp_file="/tmp/$prefixed_filename"
            cp "$scenario_wav" "$temp_file"
            
            process_audio_file "$temp_file" "SCENARIO_$scenario_name"
            
            # Nettoyer fichier temporaire
            rm -f "$temp_file"
            
            file_count=$((file_count + 1))
        fi
    done
    echo "   üé≠ $file_count fichier(s) TTS de sc√©narios trait√©(s)"
else
    echo "   ‚ÑπÔ∏è  R√©pertoire scenarios/ non trouv√©"
fi

# 3. Permissions
echo "üîê Configuration des permissions..."
chown -R asterisk:asterisk "$ASTERISK_SOUNDS"
chmod -R 644 "$ASTERISK_SOUNDS"/*.wav
chmod 755 "$ASTERISK_SOUNDS"

# 4. V√©rification
echo ""
echo "üìä Fichiers install√©s :"
ls -lh "$ASTERISK_SOUNDS"/*.wav 2>/dev/null | awk '{print "   " $9 " (" $5 ")"}'

# 5. Info sur audio_texts.json
echo ""
echo "üí° Note: audio_texts.json est g√©n√©r√© par scenario_generator.py"
echo "   (utilis√© pour le clonage vocal √† partir des fichiers audio/)"

# 6. Correction des permissions (√©vite les probl√®mes si lanc√© en sudo)
echo ""
echo "üîê Correction des permissions..."

# R√©cup√©rer l'utilisateur r√©el (m√™me si lanc√© en sudo)
if [ -n "$SUDO_USER" ]; then
    REAL_USER="$SUDO_USER"
else
    REAL_USER="$USER"
fi

# Corriger les permissions des logs cr√©√©s par le script Python
chown -R "$REAL_USER:$REAL_USER" "$PROJECT_ROOT/logs/" 2>/dev/null || true
echo "   ‚úÖ Permissions corrig√©es pour $REAL_USER"

echo ""
echo "‚úÖ Configuration MULTI-SOURCES termin√©e !"
echo ""
echo "‚ÑπÔ∏è  Notes importantes :"
echo "   ‚Ä¢ Fichiers install√©s dans : $ASTERISK_SOUNDS"
echo "   ‚Ä¢ Format optimis√© : 16kHz mono WAV (AudioFork + Vosk + MixMonitor)"
echo "   ‚Ä¢ Utilisables avec : sound:minibot/[nom_fichier]"
echo "   ‚Ä¢ R√©glage volume appliqu√© : $GAIN_LABEL"
echo ""
echo "üìÅ Sources audio trait√©es :"
echo "   ‚Ä¢ $AUDIO_SOURCE (audio de base)"
echo "   ‚Ä¢ $TTS_GENERATED_SOURCE (TTS g√©n√©r√©s)"
echo "   ‚Ä¢ $SCENARIOS_SOURCE (TTS sc√©narios avec pr√©fixe)"
echo ""
echo "üîÑ Pour modifier le volume :"
echo "   ‚Ä¢ M√©thode rapide : sudo ./setup_audio.sh -f"
echo "   ‚Ä¢ Ou manuellement : rm -rf $ASTERISK_SOUNDS/*.wav puis relancer"
echo ""
echo "üí° Ce script est INTELLIGENT :"
echo "   ‚Ä¢ Recopie seulement les fichiers modifi√©s"
echo "   ‚Ä¢ Traite automatiquement TOUTES les sources audio"
echo "   ‚Ä¢ Compatible streaming temps r√©el + enregistrement complet"
echo ""
echo "üéØ Prochaines √©tapes recommand√©es :"
echo "   1. V√©rifier : ls -la $ASTERISK_SOUNDS"
echo "   2. Cr√©er sc√©nario : python3 system/scenario_generator.py (g√©n√®re audio_texts.json + TTS)"
echo "   3. Tester streaming : ./start_system.sh"
echo ""