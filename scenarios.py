#!/usr/bin/env python3
"""
Sc√©narios d'appel pour MiniBotPanel v2
Version compl√®tement refaite - Compatible avec nouveau robot_ari.py
"""

from datetime import datetime
from sqlalchemy.orm import Session
from database import SessionLocal
from models import Call, CallInteraction, Contact
from logger_config import get_logger
import time
import os

logger = get_logger(__name__)

# Import des services d'assemblage et transcription
try:
    from services.audio_assembly_service import audio_assembly_service
    from services.transcript_service import transcript_service
    ASSEMBLY_AVAILABLE = True
except Exception as e:
    logger.warning(f"‚ö†Ô∏è  Audio assembly/transcript services not available: {e}")
    ASSEMBLY_AVAILABLE = False

# ============================================================================
# ‚è±Ô∏è CONFIGURATION DES TEMPS D'√âCOUTE PAR √âTAPE
# ============================================================================
# Tu peux modifier ces valeurs facilement selon tes besoins !
#
# Param√®tres:
#   - max_silence_seconds: Secondes de silence pour consid√©rer que la r√©ponse est termin√©e
#   - wait_before_stop: Temps maximum total d'√©coute (en secondes)
#
# Astuce: Si les r√©ponses sont coup√©es trop t√¥t ‚Üí Augmenter wait_before_stop
#         Si le robot attend trop longtemps apr√®s la r√©ponse ‚Üí R√©duire max_silence_seconds

LISTEN_TIMEOUTS = {
    "hello": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 8 ‚Üí 15s pour laisser le temps de r√©pondre
    },
    "retry": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 6 ‚Üí 15s pour laisser le temps de r√©pondre
    },
    "q1": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 10 ‚Üí 15s pour laisser le temps de r√©pondre
    },
    "q2": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 10 ‚Üí 15s pour laisser le temps de r√©pondre
    },
    "q3": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 10 ‚Üí 15s pour laisser le temps de r√©pondre
    },
    "is_leads": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 8 ‚Üí 15s pour laisser le temps de r√©pondre
    },
    "confirm": {
        "max_silence_seconds": 2,
        "wait_before_stop": 15  # Augment√© de 6 ‚Üí 15s pour laisser le temps de r√©pondre
    }
}

def is_answering_machine(transcription):
    """
    D√©tecte si la transcription correspond √† un r√©pondeur

    Args:
        transcription: Texte transcrit par Whisper

    Returns:
        bool: True si r√©pondeur d√©tect√©, False sinon
    """
    if not transcription or transcription in ["silence", "error"]:
        return False

    # Normaliser le texte (minuscules, sans accents pour la d√©tection)
    text_lower = transcription.lower()

    # Mots-cl√©s typiques des r√©pondeurs fran√ßais - LISTE CONSOLID√âE ET EXHAUSTIVE
    answering_machine_keywords = [
        # Messages standards
        "message", "messagerie", "bo√Æte vocale", "boite vocale",
        "laisser un message", "d√©poser un message", "laissez un message",
        "d√©posez un message", "enregistrer un message", "enregistrez votre message",
        "r√©pondeur", "repondeur",

        # √âtat d'indisponibilit√© (SANS "occup√©" car trop de faux positifs avec vraies personnes)
        "joignable", "absent", "indisponible",
        "actuellement indisponible", "pas disponible actuellement",
        "pour le moment", "en ce moment",
        "ne suis pas l√†", "ne peux pas r√©pondre", "momentan√©ment absent",
        "en d√©placement", "en r√©union",

        # Actions - Verbes d'instruction (NOUVEAUX - d√©couverts lors des tests)
        "appuyez", "appuyer", "tapez", "taper", "composez", "composer",
        "touchez", "toucher", "pressez", "presser", "saisissez", "saisir",
        "faites", "faire", "enregistrez", "enregistrer",
        "modifiez", "modifier", "changez", "changer",

        # Touches et symboles t√©l√©phoniques (NOUVEAUX)
        "touche", "la touche", "di√®se", "diez", "diese", "die√®se",
        "√©toile", "etoile", "ast√©risque", "asterisque",
        "touche √©toile", "touche di√®se", "touche diez",
        "touche 1", "touche 2", "touche 3", "touche 4", "touche 5",
        "touche 10", "sur la touche", "la touche num√©ro",

        # Instructions de rappel
        "rappeler", "rappellerai", "rappellera", "rappellerez", "recontacter",
        "vous rappeler", "je vous rappelle", "nous vous rappelons",
        "rappel√© d√®s que possible", "vous recontacte",

        # Signaux sonores
        "bip", "le bip", "apr√®s le bip", "au bip sonore", "signal",
        "tonalit√©", "signal sonore", "bip sonore", "au signal",

        # Phrases d'accueil typiques
        "vous √™tes bien", "bienvenue sur", "merci d'avoir appel√©",
        "vous avez appel√©", "vous √™tes sur", "ici le r√©pondeur",
        "bonjour vous √™tes", "vous avez joint", "vous √™tes en communication",

        # Instructions finales (NOUVEAUX - bas√©s sur tests r√©els)
        "termin√©", "terminez", "pour terminer", "fin du message",
        "raccrochez", "pour raccrocher",

        # Pr√©positions + actions (patterns complets)
        "pour d√©poser", "pour laisser", "pour enregistrer", "pour modifier",
        "afin de laisser", "afin de d√©poser", "si vous souhaitez",
        "veuillez laisser", "veuillez d√©poser", "veuillez patienter",

        # Patterns de choix multiples (menus vocaux)
        "pour joindre", "pour parler", "pour √™tre rappel√©",
        "appuyez sur 1", "tapez 1", "faites le 1", "composez le",
        "option 1", "option 2", "choix 1", "choix 2"
    ]

    # V√©rifier si au moins un mot-cl√© est pr√©sent
    for keyword in answering_machine_keywords:
        if keyword in text_lower:
            logger.info(f"ü§ñ Answering machine detected: keyword '{keyword}' found")
            return True

    return False

def update_contact_status_from_call(phone_number, amd_result=None, final_sentiment=None, is_lead_qualified=False, call_completed=True):
    """
    Met √† jour le statut du contact selon le r√©sultat de l'appel

    Statuts possibles :
    - New : Jamais appel√© (d√©faut √† l'import)
    - No_answer : R√©pondeur ou erreur technique ‚Üí √Ä RAPPELER
    - Leads : Lead qualifi√© (r√©ponse positive √† question de qualification) ‚Üí NE PAS RAPPELER
    - Not_interested : Pas int√©ress√© ou raccroche ‚Üí NE PAS RAPPELER

    Args:
        phone_number: Num√©ro du contact
        amd_result: R√©sultat AMD (human/machine/unknown)
        final_sentiment: Sentiment final de l'appel
        is_lead_qualified: True si r√©ponse positive √† la question de qualification
        call_completed: False si erreur technique (pour retry)
    """
    db = SessionLocal()
    try:
        contact = db.query(Contact).filter(Contact.phone == phone_number).first()
        if contact:
            # Logique de statut selon les 4 cas possibles
            if not call_completed:
                # Erreur technique ‚Üí No_answer pour permettre retry
                contact.status = "No_answer"
                logger.info(f"   ‚ùå Erreur technique ‚Üí No_answer (retry possible)")

            elif amd_result == "machine":
                # R√©pondeur d√©tect√© ‚Üí No_answer pour permettre retry
                contact.status = "No_answer"
                logger.info(f"   ü§ñ R√©pondeur d√©tect√© ‚Üí No_answer (retry possible)")

            elif is_lead_qualified:
                # Lead qualifi√© ! (r√©ponse positive √† question de qualification)
                contact.status = "Leads"
                logger.info(f"   ‚úÖ Lead qualifi√© ‚Üí Leads")

            else:
                # Pas int√©ress√© (sentiment n√©gatif ou raccroche)
                contact.status = "Not_interested"
                logger.info(f"   ‚ùå Pas int√©ress√© ‚Üí Not_interested")

            # Mise √† jour des compteurs
            contact.attempts += 1
            contact.last_attempt = datetime.now()

            db.commit()
            logger.info(f"üìä Contact status updated: {phone_number} ‚Üí {contact.status}")
        else:
            logger.warning(f"‚ö†Ô∏è Contact {phone_number} not found in database")

    except Exception as e:
        logger.error(f"‚ùå Failed to update contact status: {e}", exc_info=True)
        db.rollback()
    finally:
        db.close()

# ============================================================================
# SCENARIO TEST - D√âSACTIV√â (conserv√© pour r√©f√©rence/debug)
# ============================================================================
# Le sc√©nario TEST est maintenant remplac√© par scenario_production
# Il est gard√© ici uniquement pour r√©f√©rence ou debug futur

def scenario_test(robot, channel_id, phone_number, campaign_id=None):
    """
    ‚ö†Ô∏è D√âSACTIV√â - Sc√©nario TEST conserv√© pour r√©f√©rence uniquement

    Sc√©nario TEST avec d√©tection de sentiment am√©lior√©e:
    1. Intro
    2. Analyse du sentiment de la r√©ponse:
       - POSITIVE ‚Üí question_1
       - INTERROGATIF ‚Üí reponse_question (r√©pond aux questions "Qui?", "Pourquoi?", etc.)
       - NEGATIVE ‚Üí retry
       - UNCLEAR ‚Üí retry
    3. Conclusion

    Args:
        robot: Instance de RobotARI pour acc√®s aux m√©thodes
        channel_id: ID du canal Asterisk
        phone_number: Num√©ro appel√©
        campaign_id: ID de la campagne (optionnel)
    """
    try:
        logger.info(f"üé¨ Starting scenario TEST for {phone_number}")
        logger.info(f"   Channel: {channel_id}")
        logger.info(f"   Campaign: {campaign_id or 'None'}")

        # ü§ñ AUTO-TRACKING: Plus besoin de g√©rer interaction_sequence manuellement !
        # Le robot tracke automatiquement tous les fichiers audio jou√©s

        # 1. MESSAGE D'INTRODUCTION (attend automatiquement la fin!)
        logger.info("üì¢ Playing intro message...")
        robot.play_audio_file(channel_id, "intro")  # ü§ñ Auto-track√© !

        # 2. ENREGISTRER LA R√âPONSE AVEC D√âTECTION DE SILENCE (STREAMING OU BATCH)
        logger.info("üé§ Recording customer response with silence detection...")
        recording_name = f"test_{channel_id}_{int(time.time())}"

        # Enregistrement batch avec d√©tection de silence
        transcription, sentiment = robot.record_with_silence_detection(
            channel_id,
            recording_name,
            max_silence_seconds=2,    # 2 secondes de silence = r√©ponse termin√©e
            wait_before_stop=5        # Max 5s (temps total maximum)
        )

        if transcription and transcription not in ["silence", "error"]:
            logger.info(f"üìù Transcription: '{transcription[:100]}...'")
            logger.info(f"üí≠ Sentiment detected: {sentiment}")
            # ü§ñ Auto-track√© par record_with_silence_detection !

            # 3. D√âTECTION INTELLIGENTE DE R√âPONDEUR
            if is_answering_machine(transcription):
                logger.warning(f"ü§ñ ANSWERING MACHINE DETECTED!")
                logger.warning(f"   Transcription: '{transcription}'")
                logger.warning(f"   ‚èπÔ∏è  Hanging up immediately to save time")

                # Sauvegarder qu'on a d√©tect√© un r√©pondeur
                robot.save_interaction(
                    call_id=channel_id,
                    question_num=1,
                    question_type="intro_response",
                    transcription=transcription,
                    sentiment="answering_machine"
                )

                # Mettre √† jour le statut de l'appel avec "answering_machine"
                update_final_call_status(channel_id, "answering_machine")

                # Mettre √† jour le statut du contact ‚Üí No_answer (pour retry)
                update_contact_status_from_call(
                    phone_number=phone_number,
                    amd_result="machine",
                    final_sentiment="answering_machine",
                    is_lead_qualified=False,
                    call_completed=True
                )

                # Raccrocher imm√©diatement
                logger.info(f"üìû Hanging up - Total call duration saved!")
                return  # Sortir du sc√©nario, le finally() va raccrocher

            # 4. SAUVEGARDER L'INTERACTION (si pas r√©pondeur)
            robot.save_interaction(
                call_id=channel_id,
                question_num=1,
                question_type="intro_response",
                transcription=transcription,
                sentiment=sentiment
            )

            # 5. JOUER MESSAGE APPROPRI√â SELON SENTIMENT
            if sentiment == "positive":  # ATTENTION: sentiment_service retourne "positive" pas "positif" !
                logger.info("üòä Positive response detected ‚Üí Playing question_1")
                robot.play_audio_file(channel_id, "question_1")  # ü§ñ Auto-track√© !

                # Enregistrer r√©ponse √† question_1 avec d√©tection de silence
                recording2_name = f"test_q1_{channel_id}_{int(time.time())}"
                trans2, sent2 = robot.record_with_silence_detection(
                    channel_id,
                    recording2_name,
                    max_silence_seconds=2,    # 2 secondes de silence = r√©ponse termin√©e
                    wait_before_stop=5        # Max 5s pour r√©pondre
                )
                # ü§ñ Auto-track√© !

                if trans2 and trans2 not in ["silence", "error"]:
                    logger.info(f"üìù Q1 Response: '{trans2[:50]}...' ‚Üí {sent2}")
                    robot.save_interaction(
                        call_id=channel_id,
                        question_num=2,
                        question_type="question_1",
                        transcription=trans2,
                        sentiment=sent2
                    )

            elif sentiment == "interrogatif":  # NOUVEAU: questions/m√©fiance ‚Üí retry pour l'instant
                logger.info("‚ùì Interrogative response detected ‚Üí Playing retry message (temporary)")
                robot.play_audio_file(channel_id, "retry")  # ü§ñ Auto-track√© !

                # Enregistrer r√©ponse apr√®s retry
                recording_question_name = f"test_interrogatif_{channel_id}_{int(time.time())}"
                trans_question, sent_question = robot.record_with_silence_detection(
                    channel_id,
                    recording_question_name,
                    max_silence_seconds=2,    # 2 secondes de silence = r√©ponse termin√©e
                    wait_before_stop=5        # Max 5s pour r√©pondre
                )
                # ü§ñ Auto-track√© !

                if trans_question and trans_question not in ["silence", "error"]:
                    logger.info(f"üìù After Interrogatif Response: '{trans_question[:50]}...' ‚Üí {sent_question}")
                    robot.save_interaction(
                        call_id=channel_id,
                        question_num=2,
                        question_type="after_interrogatif",
                        transcription=trans_question,
                        sentiment=sent_question
                    )

            elif sentiment == "negative":  # "negative" pas "negatif"
                logger.info("üòû Negative response detected ‚Üí Playing retry message")
                robot.play_audio_file(channel_id, "retry")  # ü§ñ Auto-track√© !

                # Enregistrer r√©ponse apr√®s retry
                recording_retry_name = f"test_retry_{channel_id}_{int(time.time())}"
                trans_retry, sent_retry = robot.record_with_silence_detection(
                    channel_id,
                    recording_retry_name,
                    max_silence_seconds=2,    # 2 secondes de silence = r√©ponse termin√©e
                    wait_before_stop=5        # Max 5s pour r√©pondre
                )
                # ü§ñ Auto-track√© !

                if trans_retry and trans_retry not in ["silence", "error"]:
                    logger.info(f"üìù Retry Response: '{trans_retry[:50]}...' ‚Üí {sent_retry}")
                    robot.save_interaction(
                        call_id=channel_id,
                        question_num=2,
                        question_type="retry",
                        transcription=trans_retry,
                        sentiment=sent_retry
                    )

            else:  # neutre ou unclear
                logger.info("ü§∑ Neutral/unclear response ‚Üí Playing retry message")
                robot.play_audio_file(channel_id, "retry")  # ü§ñ Auto-track√© !

                # Enregistrer r√©ponse apr√®s retry
                recording_retry_name = f"test_retry_{channel_id}_{int(time.time())}"
                trans_retry, sent_retry = robot.record_with_silence_detection(
                    channel_id,
                    recording_retry_name,
                    max_silence_seconds=2,    # 2 secondes de silence = r√©ponse termin√©e
                    wait_before_stop=5        # Max 5s pour r√©pondre
                )
                # ü§ñ Auto-track√© !

                if trans_retry and trans_retry not in ["silence", "error"]:
                    logger.info(f"üìù Retry Response: '{trans_retry[:50]}...' ‚Üí {sent_retry}")
                    robot.save_interaction(
                        call_id=channel_id,
                        question_num=2,
                        question_type="retry",
                        transcription=trans_retry,
                        sentiment=sent_retry
                    )

        else:
            logger.warning("‚ö†Ô∏è No transcription captured")
            # Pas de bip, on passe directement √† la conclusion

        # 6. MESSAGE DE CONCLUSION
        logger.info("üëã Playing conclusion message...")
        robot.play_audio_file(channel_id, "conclusion")  # ü§ñ Auto-track√© !

        # 7. METTRE √Ä JOUR LE STATUT FINAL DE L'APPEL
        final_sentiment = sentiment if 'sentiment' in locals() else "unknown"
        update_final_call_status(channel_id, final_sentiment)

        # 7.5 METTRE √Ä JOUR LE STATUT DU CONTACT
        # Pour le sc√©nario TEST, on qualifie en lead si positive aux 2 questions
        # Dans ton sc√©nario final, tu changeras cette logique pour ta question de qualification
        is_lead = False
        if 'sentiment' in locals() and 'sent2' in locals():
            # Lead si sentiment initial positif ET sentiment question_1 positif
            is_lead = (sentiment == "positive" and sent2 == "positive")

        # R√©cup√©rer l'AMD result depuis la base
        db_temp = SessionLocal()
        try:
            call_temp = db_temp.query(Call).filter(Call.call_id == channel_id).first()
            amd = call_temp.amd_result if call_temp else None
        finally:
            db_temp.close()

        # Mettre √† jour le statut du contact
        update_contact_status_from_call(
            phone_number=phone_number,
            amd_result=amd,
            final_sentiment=final_sentiment,
            is_lead_qualified=is_lead,
            call_completed=True
        )

        # 8. G√âN√âRER AUDIO COMPLET + TRANSCRIPTION (si services disponibles)
        if ASSEMBLY_AVAILABLE:
            try:
                logger.info("üé¨ Generating complete call audio and transcript...")

                # ü§ñ AUTO-TRACKING: R√©cup√©rer la s√©quence compl√®te automatiquement
                interaction_sequence = robot.get_call_sequence(channel_id)

                # Assembler tous les fichiers audio
                assembled_audio = audio_assembly_service.assemble_call_audio(
                    call_id=channel_id,
                    audio_sequence=interaction_sequence
                )

                # R√©cup√©rer les donn√©es de l'appel pour la transcription
                db = SessionLocal()
                try:
                    call = db.query(Call).filter(Call.call_id == channel_id).first()
                    if call and assembled_audio:
                        # Mettre √† jour le chemin de l'audio assembl√©
                        call.assembled_audio_path = assembled_audio
                        db.commit()

                        # G√©n√©rer la transcription compl√®te
                        call_data = {
                            "call_id": channel_id,
                            "phone_number": phone_number,
                            "campaign_id": campaign_id,
                            "amd_result": call.amd_result,
                            "duration": call.duration,
                            "started_at": call.started_at,
                            "ended_at": call.ended_at,
                            "final_sentiment": final_sentiment,
                            "interested": call.is_interested,
                            "assembled_audio": assembled_audio
                        }

                        # Formater les interactions depuis interaction_sequence
                        formatted_interactions = []
                        for item in interaction_sequence:
                            if item["type"] == "bot":
                                formatted_interactions.append({
                                    "speaker": "bot",
                                    "audio_file": item["file"],
                                    "timestamp": item["timestamp"].isoformat() if item.get("timestamp") else None
                                })
                            else:  # client
                                formatted_interactions.append({
                                    "speaker": "client",
                                    "audio_file": item["file"],
                                    "transcription": item.get("transcription", ""),
                                    "sentiment": item.get("sentiment", "unclear"),
                                    "confidence": 0.8,
                                    "timestamp": item["timestamp"].isoformat() if item.get("timestamp") else None
                                })

                        transcript = transcript_service.generate_transcript(call_data, formatted_interactions)
                        if transcript:
                            logger.info(f"‚úÖ Complete transcript generated successfully")
                    else:
                        logger.warning("‚ö†Ô∏è  Could not find call in database or audio assembly failed")
                finally:
                    db.close()

            except Exception as e:
                logger.error(f"‚ùå Error generating complete audio/transcript: {e}", exc_info=True)

        logger.info(f"‚úÖ Scenario TEST completed for {phone_number}")

    except Exception as e:
        logger.error(f"‚ùå Error in scenario_test: {e}", exc_info=True)

        # En cas d'erreur, mettre le contact en No_answer pour retry
        try:
            update_contact_status_from_call(
                phone_number=phone_number,
                amd_result=None,
                final_sentiment="error",
                is_lead_qualified=False,
                call_completed=False  # Erreur technique ‚Üí retry possible
            )
        except Exception as status_error:
            logger.error(f"‚ùå Failed to update contact status after error: {status_error}")
    finally:
        # Toujours raccrocher √† la fin
        try:
            robot.hangup(channel_id)
        except Exception as e:
            logger.error(f"‚ùå Error during hangup: {e}")


def update_final_call_status(call_id, sentiment):
    """
    Met √† jour le statut final de l'appel dans la base

    Args:
        call_id: ID de l'appel
        sentiment: Sentiment final d√©tect√©
    """
    db = SessionLocal()
    try:
        call = db.query(Call).filter(Call.call_id == call_id).first()
        if call:
            call.final_sentiment = sentiment
            call.is_interested = (sentiment == "positive")  # "positive" pas "positif"
            call.ended_at = datetime.now()

            if call.started_at:
                call.duration = int((call.ended_at - call.started_at).total_seconds())

            db.commit()
            logger.info(f"üìä Call status updated: {call_id}")
            logger.info(f"   Final sentiment: {sentiment}")
            logger.info(f"   Interested: {call.is_interested}")
            logger.info(f"   Duration: {call.duration}s")
        else:
            logger.warning(f"‚ö†Ô∏è Call {call_id} not found in database")

    except Exception as e:
        logger.error(f"‚ùå Failed to update call status: {e}", exc_info=True)
        db.rollback()
    finally:
        db.close()


# ============================================================================
# SCENARIO PRODUCTION - SC√âNARIO ACTIF UNIQUE
# ============================================================================

def scenario_production(robot, channel_id, phone_number, campaign_id=None):
    """
    üéØ SC√âNARIO UNIVERSEL DE QUALIFICATION PROGRESSIVE

    Structure r√©utilisable pour toutes les campagnes - Il suffit de changer les 9 fichiers audio !

    üìã FLOW:
    1. Hello (intro + 3 questions) ‚Üí Positive/Neutre: Q1 | N√©gatif/Interrogatif: Retry | Silence/R√©pondeur: Raccroche
    2. Retry (1x max) ‚Üí Positive/Neutre: Q1 | N√©gatif: Bye_Failed (Not_interested)
    3. Q1 ‚Üí Q2 ‚Üí Q3 (toujours continuer, peu importe r√©ponse Oui/Non)
    4. Is_Leads (question finale de qualification) ‚Üí Positive/Neutre: LEAD | N√©gatif: NOT_INTERESTED
    5. Confirm (si Lead) ‚Üí Demande cr√©neau
    6. Bye_Success (Lead) ou Bye_Failed (Not_interested)

    üéµ FICHIERS AUDIO REQUIS (9):
    - hello.wav          : Introduction + "√ßa vous va ?"
    - retry.wav          : Relance si n√©gatif/interrogatif
    - q1.wav             : Question 1 (qualifiante mais n'influence pas le statut)
    - q2.wav             : Question 2 (qualifiante mais n'influence pas le statut)
    - q3.wav             : Question 3 (qualifiante mais n'influence pas le statut)
    - is_leads.wav       : Question FINALE qui d√©termine Lead/Not_interested
    - confirm.wav        : Demande cr√©neau (matin/apr√®s-midi/soir)
    - bye_success.wav    : Fin positive (Lead confirm√©)
    - bye_failed.wav     : Fin n√©gative (Not_interested)

    üìä STATUTS FINAUX:
    - Leads : R√©ponse Positive/Neutre √† is_leads
    - Not_interested : R√©ponse N√©gative √† is_leads OU raccrochage pr√©matur√©
    - No_answer : R√©pondeur d√©tect√© OU silence total

    Args:
        robot: Instance de RobotARI
        channel_id: ID du canal Asterisk
        phone_number: Num√©ro appel√©
        campaign_id: ID de la campagne (optionnel)
    """
    try:
        logger.info(f"üé¨ Starting PRODUCTION scenario for {phone_number}")
        logger.info(f"   Channel: {channel_id}")
        logger.info(f"   Campaign: {campaign_id or 'None'}")

        # Variables de tracking
        retry_used = False
        is_lead_qualified = False
        call_completed = True
        final_sentiment = "unknown"
        in_conversation = False  # Flag pour d√©tecter raccrochage pr√©matur√© vs erreur technique

        # ========================================
        # 1. HELLO - INTRODUCTION
        # ========================================
        logger.info("=" * 60)
        logger.info("üì¢ STEP 1: HELLO - Introduction")
        logger.info("=" * 60)

        # Jouer hello et v√©rifier que √ßa marche (sinon = raccrochage)
        playback_id = robot.play_audio_file(channel_id, "hello")
        if playback_id is None:
            raise Exception("Channel disconnected during hello playback")

        # Enregistrer la r√©ponse
        recording_hello = f"prod_hello_{channel_id}_{int(time.time())}"
        trans_hello, sent_hello = robot.record_with_silence_detection(
            channel_id,
            recording_hello,
            max_silence_seconds=LISTEN_TIMEOUTS["hello"]["max_silence_seconds"],
            wait_before_stop=LISTEN_TIMEOUTS["hello"]["wait_before_stop"]
        )

        logger.info(f"üìù Hello Response: '{trans_hello[:100] if trans_hello else 'No response'}...'")
        logger.info(f"üí≠ Sentiment: {sent_hello}")

        # ========================================
        # 1.1 V√âRIFIER R√âPONDEUR
        # ========================================
        if trans_hello and is_answering_machine(trans_hello):
            logger.warning("ü§ñ ANSWERING MACHINE DETECTED at Hello!")

            robot.save_interaction(
                call_id=channel_id,
                question_num=1,
                question_type="hello",
                transcription=trans_hello,
                sentiment="answering_machine"
            )

            update_final_call_status(channel_id, "answering_machine")
            update_contact_status_from_call(
                phone_number=phone_number,
                amd_result="machine",
                final_sentiment="answering_machine",
                is_lead_qualified=False,
                call_completed=True
            )

            logger.info("üìû Hanging up - Answering machine detected")
            return  # Raccrocher

        # ========================================
        # 1.2 V√âRIFIER SILENCE TOTAL
        # ========================================
        if not trans_hello or trans_hello in ["silence", "error"]:
            logger.warning("üîá SILENCE or ERROR at Hello - No response detected")

            robot.save_interaction(
                call_id=channel_id,
                question_num=1,
                question_type="hello",
                transcription="silence",
                sentiment="silence"
            )

            update_final_call_status(channel_id, "silence")

            # ‚úÖ CORRECTION: Silence = No_answer (rappelable, pas une vraie r√©ponse n√©gative)
            # Utiliser call_completed=False pour forcer No_answer (√©chec de communication = retry)
            update_contact_status_from_call(
                phone_number=phone_number,
                amd_result=None,
                final_sentiment="silence",
                is_lead_qualified=False,
                call_completed=False  # √âchec de communication ‚Üí No_answer (retry possible)
            )

            logger.info("üìû Hanging up - No response (will be retried)")
            return  # Raccrocher

        # Sauvegarder interaction Hello
        robot.save_interaction(
            call_id=channel_id,
            question_num=1,
            question_type="hello",
            transcription=trans_hello,
            sentiment=sent_hello
        )

        # ‚úÖ MARQUER QU'ON EST MAINTENANT EN CONVERSATION
        # Si exception apr√®s ce point = raccrochage pr√©matur√©, pas erreur technique
        in_conversation = True

        # ========================================
        # 2. GESTION RETRY (si n√©gatif/interrogatif)
        # ========================================
        if sent_hello in ["negative", "interrogatif"]:
            logger.info("=" * 60)
            logger.info("üîÑ STEP 2: RETRY - Relance after negative/interrogatif")
            logger.info("=" * 60)

            retry_used = True
            playback_id = robot.play_audio_file(channel_id, "retry")
            if playback_id is None:
                raise Exception("Channel disconnected during retry playback")

            # Enregistrer r√©ponse apr√®s retry
            recording_retry = f"prod_retry_{channel_id}_{int(time.time())}"
            trans_retry, sent_retry = robot.record_with_silence_detection(
                channel_id,
                recording_retry,
                max_silence_seconds=LISTEN_TIMEOUTS["retry"]["max_silence_seconds"],
                wait_before_stop=LISTEN_TIMEOUTS["retry"]["wait_before_stop"]
            )

            logger.info(f"üìù Retry Response: '{trans_retry[:100] if trans_retry else 'No response'}...'")
            logger.info(f"üí≠ Sentiment: {sent_retry}")

            robot.save_interaction(
                call_id=channel_id,
                question_num=2,
                question_type="retry",
                transcription=trans_retry or "silence",
                sentiment=sent_retry
            )

            # Si toujours n√©gatif apr√®s retry ‚Üí Bye_Failed
            if sent_retry == "negative":
                logger.info("‚ùå Still negative after retry ‚Üí BYE_FAILED")
                playback_id = robot.play_audio_file(channel_id, "bye_failed")
                if playback_id is None:
                    raise Exception("Channel disconnected during bye_failed playback")

                final_sentiment = "negative"
                is_lead_qualified = False

                update_final_call_status(channel_id, final_sentiment)
                update_contact_status_from_call(
                    phone_number=phone_number,
                    amd_result=None,
                    final_sentiment=final_sentiment,
                    is_lead_qualified=is_lead_qualified,
                    call_completed=True
                )

                logger.info("‚úÖ Scenario completed - Not interested")
                return  # Fin du sc√©nario

        # ========================================
        # 3. QUESTIONS QUALIFIANTES (Q1, Q2, Q3)
        # ========================================
        # Ces questions N'INFLUENCENT PAS le statut final !
        # On continue toujours √† la question suivante, peu importe Oui/Non

        for q_num in range(1, 4):  # Q1, Q2, Q3
            logger.info("=" * 60)
            logger.info(f"‚ùì STEP {2 + retry_used + q_num}: QUESTION {q_num}")
            logger.info("=" * 60)

            audio_file = f"q{q_num}"
            playback_id = robot.play_audio_file(channel_id, audio_file)
            if playback_id is None:
                raise Exception(f"Channel disconnected during {audio_file} playback")

            # Enregistrer r√©ponse
            recording_q = f"prod_q{q_num}_{channel_id}_{int(time.time())}"
            trans_q, sent_q = robot.record_with_silence_detection(
                channel_id,
                recording_q,
                max_silence_seconds=LISTEN_TIMEOUTS[f"q{q_num}"]["max_silence_seconds"],
                wait_before_stop=LISTEN_TIMEOUTS[f"q{q_num}"]["wait_before_stop"]
            )

            logger.info(f"üìù Q{q_num} Response: '{trans_q[:100] if trans_q else 'No response'}...'")
            logger.info(f"üí≠ Sentiment: {sent_q}")

            robot.save_interaction(
                call_id=channel_id,
                question_num=2 + retry_used + q_num,
                question_type=f"q{q_num}",
                transcription=trans_q or "silence",
                sentiment=sent_q
            )

            # ‚ö†Ô∏è PAS DE LOGIQUE DE SORTIE ICI !
            # On continue toujours vers la question suivante

        # ========================================
        # 4. IS_LEADS - QUESTION FINALE DE QUALIFICATION
        # ========================================
        # üéØ C'EST ICI QUE LE STATUT EST D√âTERMIN√â !

        logger.info("=" * 60)
        logger.info("üéØ STEP FINAL: IS_LEADS - Question de qualification")
        logger.info("=" * 60)

        playback_id = robot.play_audio_file(channel_id, "is_leads")
        if playback_id is None:
            raise Exception("Channel disconnected during is_leads playback")

        # Enregistrer r√©ponse IS_LEADS
        recording_is_leads = f"prod_is_leads_{channel_id}_{int(time.time())}"
        trans_is_leads, sent_is_leads = robot.record_with_silence_detection(
            channel_id,
            recording_is_leads,
            max_silence_seconds=LISTEN_TIMEOUTS["is_leads"]["max_silence_seconds"],
            wait_before_stop=LISTEN_TIMEOUTS["is_leads"]["wait_before_stop"]
        )

        logger.info(f"üìù Is_Leads Response: '{trans_is_leads[:100] if trans_is_leads else 'No response'}...'")
        logger.info(f"üí≠ Sentiment: {sent_is_leads}")

        robot.save_interaction(
            call_id=channel_id,
            question_num=6 + retry_used,
            question_type="is_leads",
            transcription=trans_is_leads or "silence",
            sentiment=sent_is_leads
        )

        # ========================================
        # 5. D√âCISION FINALE : LEAD OU NOT_INTERESTED
        # ========================================

        if sent_is_leads in ["positive", "neutre"]:
            # ‚úÖ LEAD QUALIFI√â !
            logger.info("‚úÖ LEAD QUALIFIED! (Positive/Neutre response to is_leads)")

            is_lead_qualified = True
            final_sentiment = sent_is_leads

            # ========================================
            # 6. CONFIRM - DEMANDE CR√âNEAU
            # ========================================
            logger.info("=" * 60)
            logger.info("üìÖ CONFIRM: Asking for time slot preference")
            logger.info("=" * 60)

            playback_id = robot.play_audio_file(channel_id, "confirm")
            if playback_id is None:
                raise Exception("Channel disconnected during confirm playback")

            # Enregistrer r√©ponse Confirm
            recording_confirm = f"prod_confirm_{channel_id}_{int(time.time())}"
            trans_confirm, sent_confirm = robot.record_with_silence_detection(
                channel_id,
                recording_confirm,
                max_silence_seconds=LISTEN_TIMEOUTS["confirm"]["max_silence_seconds"],
                wait_before_stop=LISTEN_TIMEOUTS["confirm"]["wait_before_stop"]
            )

            logger.info(f"üìù Confirm Response: '{trans_confirm[:100] if trans_confirm else 'No response'}...'")
            logger.info(f"üí≠ Sentiment: {sent_confirm}")

            robot.save_interaction(
                call_id=channel_id,
                question_num=7 + retry_used,
                question_type="confirm",
                transcription=trans_confirm or "silence",
                sentiment=sent_confirm
            )

            # ========================================
            # 7. BYE_SUCCESS
            # ========================================
            logger.info("=" * 60)
            logger.info("üéâ BYE_SUCCESS: Ending call with qualified lead")
            logger.info("=" * 60)

            playback_id = robot.play_audio_file(channel_id, "bye_success")
            if playback_id is None:
                raise Exception("Channel disconnected during bye_success playback")

        else:
            # ‚ùå NOT INTERESTED
            logger.info("‚ùå NOT INTERESTED (Negative response to is_leads)")

            is_lead_qualified = False
            final_sentiment = "negative"

            # ========================================
            # 8. BYE_FAILED
            # ========================================
            logger.info("=" * 60)
            logger.info("üëã BYE_FAILED: Ending call - not interested")
            logger.info("=" * 60)

            playback_id = robot.play_audio_file(channel_id, "bye_failed")
            if playback_id is None:
                raise Exception("Channel disconnected during bye_failed playback")

        # ========================================
        # 9. MISE √Ä JOUR STATUTS FINAUX
        # ========================================
        logger.info("=" * 60)
        logger.info("üìä Updating final statuses")
        logger.info("=" * 60)

        update_final_call_status(channel_id, final_sentiment)

        # R√©cup√©rer AMD result depuis la base
        db_temp = SessionLocal()
        try:
            call_temp = db_temp.query(Call).filter(Call.call_id == channel_id).first()
            amd = call_temp.amd_result if call_temp else None
        finally:
            db_temp.close()

        update_contact_status_from_call(
            phone_number=phone_number,
            amd_result=amd,
            final_sentiment=final_sentiment,
            is_lead_qualified=is_lead_qualified,
            call_completed=call_completed
        )

        # ========================================
        # 10. G√âN√âRATION AUDIO COMPLET + TRANSCRIPTION
        # ========================================
        if ASSEMBLY_AVAILABLE:
            try:
                logger.info("=" * 60)
                logger.info("üé¨ Generating complete call audio and transcript")
                logger.info("=" * 60)

                # R√©cup√©rer la s√©quence compl√®te automatiquement
                interaction_sequence = robot.get_call_sequence(channel_id)

                # Assembler tous les fichiers audio
                assembled_audio = audio_assembly_service.assemble_call_audio(
                    call_id=channel_id,
                    audio_sequence=interaction_sequence
                )

                # G√©n√©rer transcription compl√®te
                db = SessionLocal()
                try:
                    call = db.query(Call).filter(Call.call_id == channel_id).first()
                    if call and assembled_audio:
                        # Mettre √† jour le chemin de l'audio assembl√©
                        call.assembled_audio_path = assembled_audio
                        db.commit()

                        # Pr√©parer les donn√©es pour la transcription
                        call_data = {
                            "call_id": channel_id,
                            "phone_number": phone_number,
                            "campaign_id": campaign_id,
                            "amd_result": call.amd_result,
                            "duration": call.duration,
                            "started_at": call.started_at,
                            "ended_at": call.ended_at,
                            "final_sentiment": final_sentiment,
                            "interested": call.is_interested,
                            "assembled_audio": assembled_audio
                        }

                        # Formater les interactions
                        formatted_interactions = []
                        for item in interaction_sequence:
                            if item["type"] == "bot":
                                formatted_interactions.append({
                                    "speaker": "bot",
                                    "audio_file": item["file"],
                                    "timestamp": item["timestamp"].isoformat() if item.get("timestamp") else None
                                })
                            else:  # client
                                formatted_interactions.append({
                                    "speaker": "client",
                                    "audio_file": item["file"],
                                    "transcription": item.get("transcription", ""),
                                    "sentiment": item.get("sentiment", "unclear"),
                                    "confidence": 0.8,
                                    "timestamp": item["timestamp"].isoformat() if item.get("timestamp") else None
                                })

                        transcript = transcript_service.generate_transcript(call_data, formatted_interactions)
                        if transcript:
                            logger.info(f"‚úÖ Complete transcript generated successfully")
                    else:
                        logger.warning("‚ö†Ô∏è  Could not find call in database or audio assembly failed")
                finally:
                    db.close()

            except Exception as e:
                logger.error(f"‚ùå Error generating complete audio/transcript: {e}", exc_info=True)

        logger.info("=" * 60)
        logger.info(f"‚úÖ PRODUCTION Scenario completed for {phone_number}")
        logger.info(f"   Lead qualified: {is_lead_qualified}")
        logger.info(f"   Final sentiment: {final_sentiment}")
        logger.info("=" * 60)

    except Exception as e:
        logger.error(f"‚ùå Error in scenario_production: {e}", exc_info=True)

        # ‚úÖ CORRECTION: Diff√©rencier raccrochage pr√©matur√© vs erreur technique
        try:
            if 'in_conversation' in locals() and in_conversation:
                # Le client √©tait en conversation et a raccroch√©
                # ‚Üí C'est un refus = Not_interested
                logger.warning("üìû Client hung up during conversation ‚Üí Not_interested")
                update_contact_status_from_call(
                    phone_number=phone_number,
                    amd_result=None,
                    final_sentiment="hangup",
                    is_lead_qualified=False,
                    call_completed=True  # Appel termin√© (raccrochage = refus)
                )
            else:
                # Erreur avant m√™me de commencer la conversation
                # ‚Üí Erreur technique = No_answer (retry possible)
                logger.warning("‚ö†Ô∏è Technical error before conversation ‚Üí No_answer (retry)")
                update_contact_status_from_call(
                    phone_number=phone_number,
                    amd_result=None,
                    final_sentiment="error",
                    is_lead_qualified=False,
                    call_completed=False  # Erreur technique ‚Üí retry possible
                )
        except Exception as status_error:
            logger.error(f"‚ùå Failed to update contact status after error: {status_error}")

    finally:
        # Toujours raccrocher √† la fin
        try:
            robot.hangup(channel_id)
        except Exception as e:
            logger.error(f"‚ùå Error during hangup: {e}")