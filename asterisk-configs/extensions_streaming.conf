; Extensions pour MiniBotPanel v2 - Mode Streaming + Classic
; Compatible avec l'architecture hybride

[globals]
; Variables globales pour configuration dynamique
STREAMING_MODE=${STREAMING_MODE}
AUDIOFORK_HOST=${AUDIOFORK_HOST}
AUDIOFORK_PORT=${AUDIOFORK_PORT}

[outbound-robot]
; Point d'entrée principal - Mode hybride
exten => s,1,NoOp(=== MiniBotPanel v2 - Appel Robot Hybride ===)
 same => n,Answer()
 same => n,Set(PHONE_NUMBER=${ARG1})
 same => n,Set(SCENARIO=${ARG2})
 same => n,Set(CAMPAIGN_ID=${ARG3})
 same => n,Set(REC_FILE=${ARG4})
 same => n,Set(CHANNEL(hangup_handler_push)=hangup-handler,s,1)
 
 ; Déterminer le mode de fonctionnement
 same => n,NoOp(Mode de fonctionnement: ${STREAMING_MODE})
 same => n,GotoIf($["${STREAMING_MODE}"="true"]?streaming-mode:classic-mode)

; =============================================================================
; MODE STREAMING - Avec AudioFork + AMD hybride
; =============================================================================
exten => s,streaming-mode,1,NoOp(=== MODE STREAMING ACTIVÉ ===)
 ; AMD Asterisk (premier niveau - filtrage rapide)
 same => n,AMD(${AMD_INITIAL_SILENCE},${AMD_GREETING},${AMD_AFTER_GREETING_SILENCE},${AMD_TOTAL_ANALYSIS_TIME},${AMD_MIN_WORD_LENGTH},${AMD_BETWEEN_WORDS_SILENCE})
 same => n,Set(AMD_STATUS=${AMDSTATUS})
 same => n,Set(AMD_CAUSE=${AMDCAUSE})
 same => n,NoOp(AMD Asterisk: ${AMD_STATUS} - ${AMD_CAUSE})
 
 ; Traitement spécial pour répondeurs détectés par Asterisk
 same => n,GotoIf($["${AMD_STATUS}"="MACHINE"]?vm-path:continue-streaming)

exten => s,continue-streaming,1,NoOp(=== Lancement AudioFork + Stasis ===)
 ; AudioFork pour flux bidirectionnel vers Python
 same => n,AudioFork(ws://${AUDIOFORK_HOST}:${AUDIOFORK_PORT}/stream/${UNIQUEID},both)
 same => n,Set(AUDIOFORK_STATUS=${AUDIOFORKSTATUS})
 same => n,NoOp(AudioFork Status: ${AUDIOFORK_STATUS})
 
 ; Passer à l'application Stasis pour contrôle Python
 same => n,Stasis(robot,${PHONE_NUMBER},${AMD_STATUS},${SCENARIO},${CAMPAIGN_ID},${REC_FILE},streaming)
 same => n,Hangup()

; =============================================================================
; MODE CLASSIC - Fonctionnement existant (sans AudioFork)
; =============================================================================
exten => s,classic-mode,1,NoOp(=== MODE CLASSIC ACTIVÉ ===)
 ; AMD optionnel en mode classic
 same => n,GotoIf($["${AMD_ENABLED}"="true"]?amd-classic:skip-amd-classic)

exten => s,amd-classic,1,AMD(${AMD_INITIAL_SILENCE},${AMD_GREETING},${AMD_AFTER_GREETING_SILENCE},${AMD_TOTAL_ANALYSIS_TIME},${AMD_MIN_WORD_LENGTH},${AMD_BETWEEN_WORDS_SILENCE})
 same => n,Set(AMD_STATUS=${AMDSTATUS})
 same => n,Set(AMD_CAUSE=${AMDCAUSE})
 same => n,NoOp(AMD Classic: ${AMD_STATUS} - ${AMD_CAUSE})
 same => n,GotoIf($["${AMD_STATUS}"="MACHINE"]?vm-path:continue-classic)

exten => s,skip-amd-classic,1,Set(AMD_STATUS=NOTSURE)
 same => n,Set(AMD_CAUSE=)
 same => n,Goto(continue-classic,s,1)

[continue-classic]
exten => s,1,NoOp(=== Lancement Stasis Classic ===)
 same => n,Stasis(robot,${PHONE_NUMBER},${AMD_STATUS},${SCENARIO},${CAMPAIGN_ID},${REC_FILE},classic)
 same => n,Hangup()

; =============================================================================
; GESTION RÉPONDEURS - Messages automatiques
; =============================================================================
exten => vm-path,1,NoOp(=== Répondeur détecté - Message automatique ===)
 same => n,Set(VM_MESSAGE=${VM_MESSAGE_FILE})
 same => n,GotoIf($["${VM_MESSAGE}"=""]?default-vm,s,1:custom-vm,s,1)

[default-vm]
exten => s,1,NoOp(Message répondeur par défaut)
 same => n,WaitForSilence(1500,1)
 same => n,Playback(minibot/vm_message,skip)
 same => n,Wait(1)
 same => n,Hangup()

[custom-vm]
exten => s,1,NoOp(Message répondeur personnalisé: ${VM_MESSAGE})
 same => n,WaitForSilence(1500,1)
 same => n,Playback(${VM_MESSAGE},skip)
 same => n,Wait(1)
 same => n,Hangup()

; =============================================================================
; GESTION HANGUP - Nettoyage
; =============================================================================
[hangup-handler]
exten => s,1,NoOp(=== Hangup Handler - ${UNIQUEID} ===)
 same => n,Set(END_TIME=${STRFTIME(${EPOCH},,%Y-%m-%d %H:%M:%S)})
 same => n,Set(CALL_DURATION=${CDR(duration)})
 same => n,NoOp(Appel terminé: ${PHONE_NUMBER} - Durée: ${CALL_DURATION}s)
 ; Le cleanup sera géré par robot_ari.py
 same => n,Return()

; =============================================================================
; CONTEXTE TEST - Pour débuggage et tests
; =============================================================================
[robot-test]
exten => _X.,1,NoOp(=== Test MiniBotPanel v2 - ${EXTEN} ===)
 same => n,Answer()
 same => n,Set(PHONE_NUMBER=${EXTEN})
 same => n,Set(SCENARIO=test)
 same => n,Set(CAMPAIGN_ID=test-campaign)
 same => n,Set(REC_FILE=test-rec)
 same => n,Goto(outbound-robot,s,1)

; =============================================================================
; UTILITAIRES - Diagnostic et monitoring
; =============================================================================
[robot-diagnostic]
exten => status,1,NoOp(=== Status MiniBotPanel v2 ===)
 same => n,Answer()
 same => n,Playback(minibot/system_status)
 same => n,SayNumber(${STRFTIME(${EPOCH},,%H%M)})
 same => n,Hangup()

exten => config,1,NoOp(=== Configuration Info ===)
 same => n,Answer()
 same => n,NoOp(Streaming Mode: ${STREAMING_MODE})
 same => n,NoOp(AMD Enabled: ${AMD_ENABLED})
 same => n,NoOp(AudioFork: ${AUDIOFORK_HOST}:${AUDIOFORK_PORT})
 same => n,Playback(minibot/config_info)
 same => n,Hangup()