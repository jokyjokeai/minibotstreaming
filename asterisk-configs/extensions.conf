[outbound-robot]
; Robot calls with AMD (Answering Machine Detection)
; Args from ARI: ARG1=phone_number, ARG2=scenario, ARG3=campaign_id
exten => _X.,1,NoOp(Robot Call to ${EXTEN})
    same => n,Set(PHONE=${ARG1})
    same => n,Set(SCENARIO=${ARG2})
    same => n,Set(CAMPAIGN=${ARG3})
    same => n,NoOp(Args: Phone=${PHONE}, Scenario=${SCENARIO}, Campaign=${CAMPAIGN})
    ; Randomisation du Caller ID: 336 + 8 chiffres aléatoires
    same => n,Set(CALLERID(num)=336${RAND(10000000,99999999)})
    same => n,NoOp(Caller ID randomisé: ${CALLERID(num)})
    ; ⚠️ AMD NATIF DÉSACTIVÉ - Remplacé par IA AMD (Whisper + patterns) dans robot_ari.py
    ; L'IA AMD se lance automatiquement après Answer() avec 95-98% de précision
    ; same => n,AMD()
    same => n,Set(AMDSTATUS=UNKNOWN)
    same => n,NoOp(AMD natif désactivé - IA AMD utilisée à la place)
    ; AudioFork DÉSACTIVÉ - Mode batch uniquement
    ; same => n,AudioFork(ws://127.0.0.1:8080/${UNIQUEID})
    ; MixMonitor RÉACTIVÉ avec option r() pour enregistrement complet + client séparé
    ; Cela permet de coexister avec les enregistrements ARI individuels
    same => n,Set(REC_FILE=full_call_${UNIQUEID}_${EPOCH})
    same => n,MixMonitor(/var/spool/asterisk/recording/${REC_FILE}.wav,r(/var/spool/asterisk/recording/${REC_FILE}_client.wav))
    same => n,NoOp(MixMonitor recording: ${REC_FILE}.wav + ${REC_FILE}_client.wav)
    same => n,GotoIf(["${AMDSTATUS}" = "HUMAN"]?human:machine)
    same => n(human),Stasis(robot-app,${PHONE},${AMDSTATUS},${SCENARIO},${CAMPAIGN},${REC_FILE})
    ; IMPORTANT: Pas de Hangup() ici - Stasis gère la fin de l'appel
    same => n(machine),Stasis(robot-app,${PHONE},${AMDSTATUS},${SCENARIO},${CAMPAIGN},${REC_FILE})
    ; IMPORTANT: Pas de Hangup() ici - Stasis gère la fin de l'appel

[test-record]
; Context pour test d'enregistrement pendant l'installation
exten => _X.,1,NoOp(Test Recording Call to ${EXTEN})
    same => n,Answer()
    same => n,Wait(1)
    same => n,Record(${REC_FILE}.wav,10,20,k)
    same => n,Hangup()
